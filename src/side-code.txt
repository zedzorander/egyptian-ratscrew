// crate to create server
//use std::net::{TcpListener, TcpStream};
//use std::io::Write;

    //, stream: TcpStream) -> bool {
    // tests for a pair

        /*stream.write(b"There is a pair:");
        for i in &pile[0..2] {
            stream.write(format!("{}", i));
        }
        stream.write(b"");
        */

// Handles data sent from clients
/*fn handle_client(pile: &Vec<Card>, stream: TcpStream) -> TcpStream {
    if !test_pile(*pile, stream) {
        // do something
        stream.write(b"");
    }
    stream
}

    // for use in main function
    //let listener = TcpListener::bind("127.0.0.1:8").unwrap();

    /*for stream in listener.incoming() {
        let stream = stream.unwrap();

        println!("Connection established!");
        
        //handle_client(&pile, stream);
        
        // examples from
        // https://stackoverflow.com/questions/17445485/example-tcp-server-written-in-rust
        /*
        match stream {
            Err(e) => warn!("Accept error {}", e),
            Ok(stream) => {
                spawn(proc() {
                    debug!("{}", handle_client(stream));
                })
            }
        }
        */
        /*thread::spawn(|| {
            let mut stream = stream.unwrap();
            });
        */
    }*/


*/
// Trying to implement order on first three elements of pile
//use std::iter::FromIterator;
//use std::cmp::Ordering;

/*
impl Ord for Rank {
    fn cmp(&self, other: &Rank) -> Ordering {
        self.cmp(&other)
    }
}

impl PartialOrd for Rank {
    fn partial_cmp(&self, other: &Rank) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

impl PartialEq for Rank {
    fn eq(&self, other: &Rank) -> bool {
        self == other
    }
}
*/

/*
impl Ord for Card {
    fn cmp(&self, other: &Card) -> Ordering {
        self.rank.cmp(&other.rank)
    }
}

impl PartialOrd for Card {
    fn partial_cmp(&self, other: &Card) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}
*/


